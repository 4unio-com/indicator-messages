/*
 * Generated by gdbus-codegen 2.34.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __INDICATOR_MESSAGES_SERVICE_H__
#define __INDICATOR_MESSAGES_SERVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.canonical.indicator.messages.service */

#define INDICATOR_MESSAGES_TYPE_SERVICE (indicator_messages_service_get_type ())
#define INDICATOR_MESSAGES_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), INDICATOR_MESSAGES_TYPE_SERVICE, IndicatorMessagesService))
#define INDICATOR_MESSAGES_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), INDICATOR_MESSAGES_TYPE_SERVICE))
#define INDICATOR_MESSAGES_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), INDICATOR_MESSAGES_TYPE_SERVICE, IndicatorMessagesServiceIface))

struct _IndicatorMessagesService;
typedef struct _IndicatorMessagesService IndicatorMessagesService;
typedef struct _IndicatorMessagesServiceIface IndicatorMessagesServiceIface;

struct _IndicatorMessagesServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_register_application) (
    IndicatorMessagesService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_desktop_id,
    const gchar *arg_menu_path);

  gboolean (*handle_set_status) (
    IndicatorMessagesService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_desktop_id,
    const gchar *arg_status);

  gboolean (*handle_unregister_application) (
    IndicatorMessagesService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_desktop_id);

  void (*status_changed) (
    IndicatorMessagesService *object,
    const gchar *arg_status);

};

GType indicator_messages_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *indicator_messages_service_interface_info (void);
guint indicator_messages_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void indicator_messages_service_complete_register_application (
    IndicatorMessagesService *object,
    GDBusMethodInvocation *invocation);

void indicator_messages_service_complete_unregister_application (
    IndicatorMessagesService *object,
    GDBusMethodInvocation *invocation);

void indicator_messages_service_complete_set_status (
    IndicatorMessagesService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void indicator_messages_service_emit_status_changed (
    IndicatorMessagesService *object,
    const gchar *arg_status);



/* D-Bus method calls: */
void indicator_messages_service_call_register_application (
    IndicatorMessagesService *proxy,
    const gchar *arg_desktop_id,
    const gchar *arg_menu_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean indicator_messages_service_call_register_application_finish (
    IndicatorMessagesService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean indicator_messages_service_call_register_application_sync (
    IndicatorMessagesService *proxy,
    const gchar *arg_desktop_id,
    const gchar *arg_menu_path,
    GCancellable *cancellable,
    GError **error);

void indicator_messages_service_call_unregister_application (
    IndicatorMessagesService *proxy,
    const gchar *arg_desktop_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean indicator_messages_service_call_unregister_application_finish (
    IndicatorMessagesService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean indicator_messages_service_call_unregister_application_sync (
    IndicatorMessagesService *proxy,
    const gchar *arg_desktop_id,
    GCancellable *cancellable,
    GError **error);

void indicator_messages_service_call_set_status (
    IndicatorMessagesService *proxy,
    const gchar *arg_desktop_id,
    const gchar *arg_status,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean indicator_messages_service_call_set_status_finish (
    IndicatorMessagesService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean indicator_messages_service_call_set_status_sync (
    IndicatorMessagesService *proxy,
    const gchar *arg_desktop_id,
    const gchar *arg_status,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define INDICATOR_MESSAGES_TYPE_SERVICE_PROXY (indicator_messages_service_proxy_get_type ())
#define INDICATOR_MESSAGES_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), INDICATOR_MESSAGES_TYPE_SERVICE_PROXY, IndicatorMessagesServiceProxy))
#define INDICATOR_MESSAGES_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), INDICATOR_MESSAGES_TYPE_SERVICE_PROXY, IndicatorMessagesServiceProxyClass))
#define INDICATOR_MESSAGES_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), INDICATOR_MESSAGES_TYPE_SERVICE_PROXY, IndicatorMessagesServiceProxyClass))
#define INDICATOR_MESSAGES_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), INDICATOR_MESSAGES_TYPE_SERVICE_PROXY))
#define INDICATOR_MESSAGES_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), INDICATOR_MESSAGES_TYPE_SERVICE_PROXY))

typedef struct _IndicatorMessagesServiceProxy IndicatorMessagesServiceProxy;
typedef struct _IndicatorMessagesServiceProxyClass IndicatorMessagesServiceProxyClass;
typedef struct _IndicatorMessagesServiceProxyPrivate IndicatorMessagesServiceProxyPrivate;

struct _IndicatorMessagesServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  IndicatorMessagesServiceProxyPrivate *priv;
};

struct _IndicatorMessagesServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType indicator_messages_service_proxy_get_type (void) G_GNUC_CONST;

void indicator_messages_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IndicatorMessagesService *indicator_messages_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
IndicatorMessagesService *indicator_messages_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void indicator_messages_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IndicatorMessagesService *indicator_messages_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
IndicatorMessagesService *indicator_messages_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define INDICATOR_MESSAGES_TYPE_SERVICE_SKELETON (indicator_messages_service_skeleton_get_type ())
#define INDICATOR_MESSAGES_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), INDICATOR_MESSAGES_TYPE_SERVICE_SKELETON, IndicatorMessagesServiceSkeleton))
#define INDICATOR_MESSAGES_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), INDICATOR_MESSAGES_TYPE_SERVICE_SKELETON, IndicatorMessagesServiceSkeletonClass))
#define INDICATOR_MESSAGES_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), INDICATOR_MESSAGES_TYPE_SERVICE_SKELETON, IndicatorMessagesServiceSkeletonClass))
#define INDICATOR_MESSAGES_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), INDICATOR_MESSAGES_TYPE_SERVICE_SKELETON))
#define INDICATOR_MESSAGES_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), INDICATOR_MESSAGES_TYPE_SERVICE_SKELETON))

typedef struct _IndicatorMessagesServiceSkeleton IndicatorMessagesServiceSkeleton;
typedef struct _IndicatorMessagesServiceSkeletonClass IndicatorMessagesServiceSkeletonClass;
typedef struct _IndicatorMessagesServiceSkeletonPrivate IndicatorMessagesServiceSkeletonPrivate;

struct _IndicatorMessagesServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  IndicatorMessagesServiceSkeletonPrivate *priv;
};

struct _IndicatorMessagesServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType indicator_messages_service_skeleton_get_type (void) G_GNUC_CONST;

IndicatorMessagesService *indicator_messages_service_skeleton_new (void);


G_END_DECLS

#endif /* __INDICATOR_MESSAGES_SERVICE_H__ */
